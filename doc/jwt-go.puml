@startuml
namespace jwt {
    interface Claims  {
        + Valid() error

    }
    class MapClaims << (S,Aquamarine) >> {
        + VerifyAudience(cmp string, req bool) bool
        + VerifyExpiresAt(cmp int64, req bool) bool
        + VerifyIssuedAt(cmp int64, req bool) bool
        + VerifyIssuer(cmp string, req bool) bool
        + VerifyNotBefore(cmp int64, req bool) bool
        + Valid() error

    }
    class Parser << (S,Aquamarine) >> {
        + ValidMethods []string
        + UseJSONNumber bool
        + SkipClaimsValidation bool

        + Parse(tokenString string, keyFunc Keyfunc) (*Token, error)
        + ParseWithClaims(tokenString string, claims Claims, keyFunc Keyfunc) (*Token, error)
        + ParseUnverified(tokenString string, claims Claims) (*Token, []string, error)

    }
    interface SigningMethod  {
        + Verify(signingString string, signature string, key <font color=blue>interface</font>{}) error
        + Sign(signingString string, key <font color=blue>interface</font>{}) (string, error)
        + Alg() string

    }
    class SigningMethodECDSA << (S,Aquamarine) >> {
        + Name string
        + Hash crypto.Hash
        + KeySize int
        + CurveBits int

        + Alg() string
        + Verify(signingString string, signature string, key <font color=blue>interface</font>{}) error
        + Sign(signingString string, key <font color=blue>interface</font>{}) (string, error)

    }
    class SigningMethodHMAC << (S,Aquamarine) >> {
        + Name string
        + Hash crypto.Hash

        + Alg() string
        + Verify(signingString string, signature string, key <font color=blue>interface</font>{}) error
        + Sign(signingString string, key <font color=blue>interface</font>{}) (string, error)

    }
    class SigningMethodRSA << (S,Aquamarine) >> {
        + Name string
        + Hash crypto.Hash

        + Alg() string
        + Verify(signingString string, signature string, key <font color=blue>interface</font>{}) error
        + Sign(signingString string, key <font color=blue>interface</font>{}) (string, error)

    }
    class SigningMethodRSAPSS << (S,Aquamarine) >> {
        + Options *rsa.PSSOptions

        + Verify(signingString string, signature string, key <font color=blue>interface</font>{}) error
        + Sign(signingString string, key <font color=blue>interface</font>{}) (string, error)

    }
    class StandardClaims << (S,Aquamarine) >> {
        + Audience string
        + ExpiresAt int64
        + Id string
        + IssuedAt int64
        + Issuer string
        + NotBefore int64
        + Subject string

        + Valid() error
        + VerifyAudience(cmp string, req bool) bool
        + VerifyExpiresAt(cmp int64, req bool) bool
        + VerifyIssuedAt(cmp int64, req bool) bool
        + VerifyIssuer(cmp string, req bool) bool
        + VerifyNotBefore(cmp int64, req bool) bool

    }
    class Token << (S,Aquamarine) >> {
        + Raw string
        + Method SigningMethod
        + Header <font color=blue>map</font>[string]<font color=blue>interface</font>{}
        + Claims Claims
        + Signature string
        + Valid bool

        + SignedString(key <font color=blue>interface</font>{}) (string, error)
        + SigningString() (string, error)

    }
    class ValidationError << (S,Aquamarine) >> {
        - text string

        + Inner error
        + Errors uint32

        - valid() bool

        + Error() string

    }
    class jwt.Keyfunc << (T, #FF7700) >>  {
    }
    class jwt.MapClaims << (T, #FF7700) >>  {
    }
    class jwt.unsafeNoneMagicConstant << (T, #FF7700) >>  {
    }
    class signingMethodNone << (S,Aquamarine) >> {
        + Alg() string
        + Verify(signingString string, signature string, key <font color=blue>interface</font>{}) error
        + Sign(signingString string, key <font color=blue>interface</font>{}) (string, error)

    }
}
"jwt.SigningMethodRSA" *-- "jwt.SigningMethodRSAPSS"

"jwt.Claims" <|-- "jwt.MapClaims"
"jwt.SigningMethod" <|-- "jwt.SigningMethodECDSA"
"jwt.SigningMethod" <|-- "jwt.SigningMethodHMAC"
"jwt.SigningMethod" <|-- "jwt.SigningMethodRSA"
"jwt.Claims" <|-- "jwt.StandardClaims"
"jwt.SigningMethod" <|-- "jwt.signingMethodNone"

namespace main {
    class ArgList << (S,Aquamarine) >> {
        + String() string
        + Set(arg string) error

    }
    class main.ArgList << (T, #FF7700) >>  {
    }
}


namespace request {
    class ArgumentExtractor << (S,Aquamarine) >> {
        + ExtractToken(req *http.Request) (string, error)

    }
    interface Extractor  {
        + ExtractToken( *http.Request) (string, error)

    }
    class HeaderExtractor << (S,Aquamarine) >> {
        + ExtractToken(req *http.Request) (string, error)

    }
    class MultiExtractor << (S,Aquamarine) >> {
        + ExtractToken(req *http.Request) (string, error)

    }
    class PostExtractionFilter << (S,Aquamarine) >> {
        + Filter <font color=blue>func</font>(string) (string, error)

        + ExtractToken(req *http.Request) (string, error)

    }
    class fromRequestParser << (S,Aquamarine) >> {
        - req *http.Request
        - extractor Extractor
        - claims jwt-go.Claims
        - parser *jwt-go.Parser

    }
    class request.ArgumentExtractor << (T, #FF7700) >>  {
    }
    class request.HeaderExtractor << (T, #FF7700) >>  {
    }
    class request.MultiExtractor << (T, #FF7700) >>  {
    }
    class request.ParseFromRequestOption << (T, #FF7700) >>  {
    }
}
"request.Extractor" *-- "request.PostExtractionFilter"

"request.Extractor" <|-- "request.ArgumentExtractor"
"request.Extractor" <|-- "request.HeaderExtractor"
"request.Extractor" <|-- "request.MultiExtractor"
"request.Extractor" <|-- "request.PostExtractionFilter"

"__builtin__.<font color=blue>map</font>[string]string" #.. "main.ArgList"
"__builtin__.[]string" #.. "request.ArgumentExtractor"
"__builtin__.[]string" #.. "request.HeaderExtractor"
"__builtin__.string" #.. "jwt.unsafeNoneMagicConstant"
"jwt.<font color=blue>func</font>(*Token) (<font color=blue>interface</font>{}, error)" #.. "jwt.Keyfunc"
"jwt.<font color=blue>map</font>[string]<font color=blue>interface</font>{}" #.. "jwt.MapClaims"
"request.<font color=blue>func</font>(*fromRequestParser) " #.. "request.ParseFromRequestOption"
"request.[]Extractor" #.. "request.MultiExtractor"
@enduml