@startuml
namespace core {
    class Claims << (S,Aquamarine) >> {
        + Issuer string
        + Expiration int64
        + Audience string
        + Subject string
        + NotBefore int64
        + UserName string
        + GivenName string
        + FamilyName string
        + Email string

        + Valid() error

    }
    class Middleware << (S,Aquamarine) >> {
        + Handler(h http.Handler) http.Handler
        + ValidateJWT(w http.ResponseWriter, r *http.Request) error

    }
    interface OAuthConfig  {
        + GetClientID() string
        + GetClientSecret() string
        + GetBaseURL() string
        + GetTokenSigningKey(httpClient *http.Client, subdomain string) jwt.Keyfunc

    }
    class Options << (S,Aquamarine) >> {
        - httpClient *http.Client

        + UserContext string
        + OAuthConfig OAuthConfig
        + ErrorHandler errorHandler

    }
    class core.errorHandler << (T, #FF7700) >>  {
    }
    class "<font color=blue>func</font>(http.ResponseWriter, *http.Request, error) " as fontcolorbluefuncfonthttpResponseWriterhttpRequesterror {
        'This class was created so that we can correctly have an alias pointing to this name. Since it contains dots that can break namespaces
    }
}
"core.Options" *-- "core.Middleware"


namespace token_client {
    class TokenService << (S,Aquamarine) >> {
        - getTokenSigningKey(token *jwt.Token) (<font color=blue>interface</font>{}, error)

    }
    class jwk << (S,Aquamarine) >> {
        - kty string
        - e string
        - n string
        - use string
        - kid string
        - alg string

    }
}


"core.fontcolorbluefuncfonthttpResponseWriterhttpRequesterror" #.. "core.errorHandler"
@enduml